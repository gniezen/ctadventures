import websocket
import thread
import time
import json
import matplotlib.pyplot as p
from fractions import Fraction
import pickle

reference = 3.29

command = ""
iterations = 0
ydisplay = [0]
xdisplay =[0]
yDisplay2 = [0]
yError=[]
T=220

x2=[0]
i=0
time=0
target=0
cumulTime =0


def getData(val):
    users = []
    
    f = open('big.json','r')
    d = json.load(f)    

    for x in d['results']['participants']:
        for i in x['chevrons']:
            if float(i['ev']) == val:
                
                mouseEvents = 0
                for val in i['rt']:
                    if "mouse" in val['im']:
                        mouseEvents +=1
                print mouseEvents
                if mouseEvents % 2 == 0:
                    print "Equal, adding.."
                    users.append(i['rt'])
                else:
                    print "Not equal, discarding.."

    return users

def plotResult():

    #p.plot([i*T for i in x],yDisplay,'r+-', label="PVSio model")
    #p.plot(xdisplay, ydisplay,'r+-', label="PVSio model")
    p.plot(x2,yDisplay2,'g+-', label="User actions")
    p.plot(x2,[reference for i in x2],'b', label = "Reference signal")
    p.xlabel("Time (ms)")
    p.grid(b=True, which='major', color='b', linestyle='-')
    p.grid(b=True, which='minor', color='r', linestyle='--')

    p.legend()
    p.show()
    
    f = open('model.bin','wb')
    pickle.dump(xdisplay,f)
    pickle.dump(ydisplay,f)
    f.close()

def convert(s):
    try:
        return int(s)
    except ValueError:
        #return(s)
        return float(Fraction(s))

def parseOutput(output):
    s = output.strip("(##)")
    d = dict(item.split(":=") for item in s.split(",")) # Generate dictionary
    return { k.strip():convert(v.strip()) for k, v in d.iteritems()} # Remove whitespace in dictionary

def sendCommand(command, state):
    state['command'] = command
    cmdstate = '{command}((# left_display:={left_display}, step:={step}, timer:={timer} #));'.format(**state);
    d = {"type":"sendCommand", "data":{'command':cmdstate}}
    print "Sending:", d
    ws.send(json.dumps(d))

def on_message(ws, message):
    global command, iterations, xdisplay, yError, ydisplay, T, i, time, yDisplay2, target, cumulTime

    print "Message: ", message
    decoded = json.loads(message)
    dtype =  decoded['type']
    
    print 'TYPE:', dtype


    if(dtype == 'processReady'):
        ws.send('{"type":"sendCommand","data":{"command":"press_UP((# left_display := 0, step := 1, timer := 5 #));"}}')

    if(dtype == 'pvsoutput'):
        print zip(xdisplay, ydisplay)
        
        result = decoded['data']
        output = parseOutput(result[0])
        print 'Output: ', output

        ldisplay = output['left_display']
        
        error = reference - ldisplay
        print "Error: ", error
        yError.append(error)


        iterations +=1


        if(i<len(data)):

            if(i>0):
                if data[i-1]['im'] == "click": #if previous action was a click, record the current value
                    xdisplay.append(data[i-1]['ts']-time)
                    ydisplay.append(ldisplay)

            nextAction = data[i]['im']
            nextButton = data[i]['btn']
            timediff = data[i]['ts']  - time
            print "Time difference: ", timediff 
            print "NextAction: ", nextAction       

            if nextAction == "mousedown":

                if(iterations == 1): #For the first iteration we already pressed big up
                    nextAction = "mouseup"

                target = data[i+1]['v']
                print "Target value: ", target

                if(nextButton == "smallDown"):
                        command = "press_dn"
                if(nextButton == "bigUp"):
                        command = "press_UP"
                if(nextButton == "bigDown"):
                        command = "press_DN"
                if(nextButton == "smallUp"):
                        command = "press_up"
                i+=1

            
            if nextAction == "mouseup":            
                print "Target: ", target
                print "Display: ", ldisplay

                xdisplay.append(cumulTime+(iterations*T))
                ydisplay.append(ldisplay)

                if float(target) == float(ldisplay): # reached target value, release_key
                    command = "release_key"
                    i+=1
                    
                    iterations = -1 #take the extra timestep required by release_key into account
                    
                    cumulTime = data[i]['ts']  - time # need to know before the next hold_down starts
                    
                    #Add waiting time
                    xdisplay.append(cumulTime)
                    ydisplay.append(ldisplay)
                #else do nothing, command will stay the same




            if nextAction == "click":

                #Add waiting time
                xdisplay.append(data[i]['ts']  - time)
                ydisplay.append(ldisplay)

                i+=1

                if(nextButton == "smallDown"):
                        command = "click_dn"
                if(nextButton == "smallUp"):
                        command = "click_up"
                if(nextButton == "bigDown"):
                        command = "click_DN"
                if(nextButton == "bigUp"):
                        command = "click_UP"
        
        if iterations>50: # Don't continue beyond 50 button presses
            print "TIMED OUT"
            error = 0

        if(error == 0):
            command = ""
            xdisplay.append(data[i-1]['ts']  - time)
            ydisplay.append(ldisplay)

            #Get user actions
            for i in data:
                print i['btn'], ": ", i['im'], ": ",i['v'],": ", i['ts'] - time
        
                if i['ts'] - time != 0:    
                    x2.append(i['ts'] - time)

                    yDisplay2.append(i['v'])

            plotResult()

        if(command != ""):
            sendCommand(command,output)

def on_error(ws, error):
    print error

def on_close(ws):
    print "### closed ###"

def on_open(ws):
    ws.send('{"type":"startProcess","data":{"fileName":"pvscode/alarisAsenaCC"}}')


if __name__ == "__main__":
    websocket.enableTrace(True)
    ws = websocket.WebSocketApp("ws://localhost:8080/",
                                on_message = on_message,
                                on_error = on_error,
                                on_close = on_close)


    data = getData(reference)         
    while len(data)==0:
        print "next"           
        reference+=1.0
        data = getData(reference)
            
    data=getData(reference)[0] # only first participant    
    time = data[0]['ts'] # take first timestamp as t:=0    

    for a in data:
        print a['btn'], ": ", a['im'], ": ",a['v'],": ", a['ts'] - time   

    ws.on_open = on_open

    ws.run_forever()
